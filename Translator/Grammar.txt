Grammar.

lang -> expr+
expr -> assign_expr|condition_expr|while_expr|function

assign_expr -> VAR	ASSIGN_OP	value_expr EOL
condition_expr -> IF_KW LB logic_expr RB LSB expr* RSB (ELSE_KW LSB expr* RSB)?
while_expr -> WHILE_KW LB logic_expr RB LSB expr* RSB
function -> out_func

value_expr -> value (OP value)* 
value -> VAR|DIGIT|bracket_expr
bracket_expr -> LB value_expr RB
logic_expr -> value_expr COMP_OP value_expr
out_func -> PRINT_KW LB [VAR | DIGIT] RB EOL


VAR	-> ^([a-zA-Z]+)$
DIGIT -> ^(0|[1-9][0-9]*)$
ASSIGN_OP -> ^=$
OP -> ^(\+|-|\*|\/)$
LB -> ^\($
RB -> ^\)$
IF_KW -> ^if$
ELSE_KW -> ^else$
LSB -> ^\{$
RSB -> ^\}$
COMP_OP -> ^(>=|<=|>|<|!=|==)$
WHILE_KW -> ^while$
EOL -> ^;$
OUT_KW -> ^out$
