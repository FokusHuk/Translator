i = 0;
b = 5 * 2;
t = i + b / 2;
while (i < 5)
{
b = b * 2;
i = i + 1;
}
f = b * 2;
k = t / 4;

Triads:                                 Variables:
0 (i, 0, =)                             i       5
1 (5, 2, *)                             b       320
2 (b, .1, =)                            t       5 
3 (b, 2, /)                             f       640
4 (i, .3, +)                            k       1,25
5 (t, .4, =)
6 (i, 5, <)
7 (.6, 13, !F)
8 (b, 2, *)
9 (b, .8, =)
10 (i, 1, +)
11 (i, .10, =)
12 (, 6, !)
13 (b, 2, *)
14 (f, .13, =)
15 (t, 4, /)
16 (k, .15, =)
17 (, , $)


if(2 > 3)
{
b = 1;
}
else
{
b = 0;
}

0 (2, 3, >)
1 (.0, 4, !F)
2 (b, 1, =)
3 (, 5, !)
4 (b, 0, =)
5 (, , $)


a = 1;
while(a < 60)
{
a = a * 2;
}
b = 0;

0 (a, 1, =)
1 (a, 60, <)
2 (.1, 6, !F)
3 (a, 2, *)
4 (a, .3, =)
5 (, 1, !)
6 (b, 0, =)
7 (, , $)


a = 0;
for (i = 0; i < 5; i = i + 1)
{
a = a + 1;
}
b = 0;

0 (a, 0, =)
1 (i, 0, =)
2 (i, 5, <)
3 (.2, 11, !F)
4 (, 8, !)
5 (i, 1, +)
6 (i, .5, =)
7 (, 2, !)
8 (a, 1, +)
9 (a, .8, =)
10 (, 5, !)
11 (b, 0, =)
12 (, , $)

Grammar.

lang -> expr+
expr -> assign_expr|condition_expr|while_expr|function|list_expr|ht_expr|for_expr

assign_expr -> VAR SPC* ASSIGN_OP SPC* value_expr SPC* EOL SPC*
condition_expr -> IF_KW SPC* LB SPC* logic_expr SPC* RB SPC* LSB SPC* expr* SPC* RSB SPC* (ELSE_KW SPC* LSB SPC* expr* SPC* RSB)? SPC*
while_expr -> WHILE_KW SPC* LB SPC* logic_expr SPC* RB SPC* LSB SPC* expr* SPC* RSB SPC*
for_expr -> FOR_KW SPC* LB SPC* assign_expr logic_expr EOL SPC* VAR SPC* ASSIGN_OP SPC* value_expr SPC* RB SPC* LSB SPC* expr* SPC* RSB SPC*

function -> out_func
out_func -> PRINT_KW LB SPC* value_expr SPC* RB SPC* EOL SPC*


ht_expr -> ht_init|ht_insert|ht_delete|ht_display
ht_init -> HT_KW SPC+ VAR SPC* EOL SPC*
ht_insert -> VAR POINT INSERT_KW LB SPC* value_expr SPC* COMMA SPC* value_expr SPC* RB SPC* EOL SPC*
ht_delete -> VAR POINT DELETE_KW LB SPC* value_expr SPC* RB SPC* EOL SPC*
ht_search -> VAR POINT SEARCH_VALUE_KW LB SPC* value_expr SPC* RB SPC*
ht_display -> VAR POINT DISPLAY_KW LB SPC* RB SPC* EOL SPC*


list_expr -> list_init|list_insert|list_delete|list_simple_func
list_init -> LIST_KW SPC+ VAR SPC* EOL SPC*
list_insert -> VAR POINT INSERT_KW LB SPC* value_expr SPC* COMMA SPC* value_expr SPC* RB SPC* EOL SPC*
list_delete -> VAR POINT DELETE_KW LB SPC* value_expr SPC* RB SPC* EOL SPC*

list_get -> list_get_value|list_get_index|list_size
list_get_value -> VAR POINT GET_VALUE_KW LB SPC* value_expr SPC* RB SPC*
list_get_index -> VAR POINT GET_INDEX_KW LB SPC* value_expr SPC* RB SPC*
list_size -> VAR POINT func_name LB SPC* RB SPC*

list_simple_func -> VAR POINT func_name LB SPC* RB SPC* EOL SPC*
func_name -> CLEAR_KW|DISPLAY_KW


value_expr -> value SPC* (OP SPC* value)*
value -> VAR|DIGIT|bracket_expr|list_get
bracket_expr -> LB SPC* value_expr SPC* RB SPC*
logic_expr -> value_expr SPC* COMP_OP SPC* value_expr SPC*


VAR	-> ^([a-zA-Z]+)$
DIGIT -> ^(0|[1-9][0-9]*)$
ASSIGN_OP -> ^=$
OP -> ^(\+|-|\*|\/)$
LB -> ^\($
RB -> ^\)$
IF_KW -> ^if$
ELSE_KW -> ^else$
LSB -> ^\{$
RSB -> ^\}$
COMP_OP -> ^(>=|<=|>|<|!=|==)$
WHILE_KW -> ^while$
FOR_KW -> ^for$
SPC -> ^ $
EOL -> ^;$
OUT_KW -> ^out$
LIST_KW -> ^list$
POINT -> ^.$
COMMA -> ^,$
INSERT_KW -> ^insert$
GET_VALUE_KW -> ^getValue$
GET_INDEX_KW -> ^getIndex$
DELETE_KW -> ^delete$
CLEAR_KW -> ^clear$
DISPLAY_KW -> ^display$
SIZE_KW -> ^size$
HT_KW -> ^htable$
SEARCH_KW -> ^search$









Оптимизация грамматики для слияния распознавания списков и хеш-таблиц
########################

function -> out_func|collect_func
out_func -> PRINT_KW LB SPC* value_expr SPC* RB SPC* EOL SPC*
collect_func -> init_func|insert_func|delete_func|display_func|clear_func

init_func -> var_type SPC+ VAR SPC* EOL SPC*
var_type -> HT_KW|LIST_KW

insert_func -> VAR POINT INSERT_KW LB SPC* value_expr SPC* COMMA SPC* value_expr SPC* RB SPC* EOL SPC*
delete_func -> VAR POINT DELETE_KW LB SPC* value_expr SPC* RB SPC* EOL SPC*
display_func -> VAR POINT DISPLAY_KW LB SPC* RB SPC* EOL SPC*
clear_func -> VAR POINT CLEAR_KW LB SPC* RB SPC* EOL SPC*

get_func -> search_func|get_value_func|get_index_func|size_func

search_func -> VAR POINT SEARCH_VALUE_KW LB SPC* value_expr SPC* RB SPC*
get_value_func -> VAR POINT GET_VALUE_KW LB SPC* value_expr SPC* RB SPC*
get_index_func -> VAR POINT GET_INDEX_KW LB SPC* value_expr SPC* RB SPC*
size_func -> VAR POINT func_name LB SPC* RB SPC*

########################